/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
  } from "ethers";
  import { BytesLike } from "@ethersproject/bytes";
  import { Listener, Provider } from "@ethersproject/providers";
  import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
  import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";
  
  interface JcrInterface extends ethers.utils.Interface {
    functions: {
      "DEFAULT_ADMIN_ROLE()": FunctionFragment;
      "ISSUER_ROLE()": FunctionFragment;
      "MINTER_ROLE()": FunctionFragment;
      "PAUSER_ROLE()": FunctionFragment;
      "UPGRADER_ROLE()": FunctionFragment;
      "allowance(address,address)": FunctionFragment;
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "burn(uint256)": FunctionFragment;
      "burnFrom(address,uint256)": FunctionFragment;
      "decimals()": FunctionFragment;
      "decreaseAllowance(address,uint256)": FunctionFragment;
      "getRoleAdmin(bytes32)": FunctionFragment;
      "grantRole(bytes32,address)": FunctionFragment;
      "hasRole(bytes32,address)": FunctionFragment;
      "increaseAllowance(address,uint256)": FunctionFragment;
      "initialize(string,string)": FunctionFragment;
      "issuance()": FunctionFragment;
      "issue(address,uint256,string)": FunctionFragment;
      "mint(address,uint256)": FunctionFragment;
      "name()": FunctionFragment;
      "pause()": FunctionFragment;
      "paused()": FunctionFragment;
      "renounceRole(bytes32,address)": FunctionFragment;
      "revokeRole(bytes32,address)": FunctionFragment;
      "supportsInterface(bytes4)": FunctionFragment;
      "symbol()": FunctionFragment;
      "totalSupply()": FunctionFragment;
      "transfer(address,uint256)": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
      "unpause()": FunctionFragment;
      "upgradeTo(address)": FunctionFragment;
      "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "ISSUER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "MINTER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "PAUSER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "UPGRADER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "allowance",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "approve",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(
      functionFragment: "burnFrom",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "decreaseAllowance",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "getRoleAdmin",
      values: [BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "grantRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "hasRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "increaseAllowance",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [string, string]
    ): string;
    encodeFunctionData(functionFragment: "issuance", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "issue",
      values: [string, BigNumberish, string]
    ): string;
    encodeFunctionData(
      functionFragment: "mint",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "renounceRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokeRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "supportsInterface",
      values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "totalSupply",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transfer",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
    encodeFunctionData(
      functionFragment: "upgradeToAndCall",
      values: [string, BytesLike]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "ISSUER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "MINTER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "PAUSER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "UPGRADER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "decreaseAllowance",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getRoleAdmin",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "increaseAllowance",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issuance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "renounceRole",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "supportsInterface",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "totalSupply",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "upgradeToAndCall",
      data: BytesLike
    ): Result;
  
    events: {
      "AdminChanged(address,address)": EventFragment;
      "Approval(address,address,uint256)": EventFragment;
      "BeaconUpgraded(address)": EventFragment;
      "Paused(address)": EventFragment;
      "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
      "RoleGranted(bytes32,address,address)": EventFragment;
      "RoleRevoked(bytes32,address,address)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
      "Unpaused(address)": EventFragment;
      "Upgraded(address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  }
  
  export type AdminChangedEvent = TypedEvent<
    [string, string] & { previousAdmin: string; newAdmin: string }
  >;
  
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber] & {
      owner: string;
      spender: string;
      value: BigNumber;
    }
  >;
  
  export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;
  
  export type PausedEvent = TypedEvent<[string] & { account: string }>;
  
  export type RoleAdminChangedEvent = TypedEvent<
    [string, string, string] & {
      role: string;
      previousAdminRole: string;
      newAdminRole: string;
    }
  >;
  
  export type RoleGrantedEvent = TypedEvent<
    [string, string, string] & { role: string; account: string; sender: string }
  >;
  
  export type RoleRevokedEvent = TypedEvent<
    [string, string, string] & { role: string; account: string; sender: string }
  >;
  
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
  >;
  
  export type UnpausedEvent = TypedEvent<[string] & { account: string }>;
  
  export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;
  
  export class Jcr extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;
  
    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;
  
    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
      event: TypedEventFilter<EventArgsArray, EventArgsObject>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
  
    interface: JcrInterface;
  
    functions: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      ISSUER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      allowance(
        owner: string,
        spender: string,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  
      burn(
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      burnFrom(
        account: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      decimals(overrides?: CallOverrides): Promise<[number]>;
  
      decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      initialize(
        name: string,
        symbol: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      issuance(
        overrides?: CallOverrides
      ): Promise<
        [
          [BigNumber[], BigNumber[], string[]] & {
            time: BigNumber[];
            amount: BigNumber[];
            memo: string[];
          }
        ]
      >;
  
      issue(
        to: string,
        amount: BigNumberish,
        memo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      mint(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      name(overrides?: CallOverrides): Promise<[string]>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      paused(overrides?: CallOverrides): Promise<[boolean]>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      symbol(overrides?: CallOverrides): Promise<[string]>;
  
      totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
    ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  
    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    decimals(overrides?: CallOverrides): Promise<number>;
  
    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    initialize(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    issuance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], string[]] & {
        time: BigNumber[];
        amount: BigNumber[];
        memo: string[];
      }
    >;
  
    issue(
      to: string,
      amount: BigNumberish,
      memo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    name(overrides?: CallOverrides): Promise<string>;
  
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    paused(overrides?: CallOverrides): Promise<boolean>;
  
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    symbol(overrides?: CallOverrides): Promise<string>;
  
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
      ISSUER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      allowance(
        owner: string,
        spender: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      approve(
        spender: string,
        amount: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  
      burnFrom(
        account: string,
        amount: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      decimals(overrides?: CallOverrides): Promise<number>;
  
      decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      initialize(
        name: string,
        symbol: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      issuance(
        overrides?: CallOverrides
      ): Promise<
        [BigNumber[], BigNumber[], string[]] & {
          time: BigNumber[];
          amount: BigNumber[];
          memo: string[];
        }
      >;
  
      issue(
        to: string,
        amount: BigNumberish,
        memo: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      mint(
        to: string,
        amount: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      name(overrides?: CallOverrides): Promise<string>;
  
      pause(overrides?: CallOverrides): Promise<void>;
  
      paused(overrides?: CallOverrides): Promise<boolean>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      symbol(overrides?: CallOverrides): Promise<string>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      unpause(overrides?: CallOverrides): Promise<void>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "AdminChanged(address,address)"(
        previousAdmin?: null,
        newAdmin?: null
      ): TypedEventFilter<
        [string, string],
        { previousAdmin: string; newAdmin: string }
      >;
  
      AdminChanged(
        previousAdmin?: null,
        newAdmin?: null
      ): TypedEventFilter<
        [string, string],
        { previousAdmin: string; newAdmin: string }
      >;
  
      "Approval(address,address,uint256)"(
        owner?: string | null,
        spender?: string | null,
        value?: null
      ): TypedEventFilter<
        [string, string, BigNumber],
        { owner: string; spender: string; value: BigNumber }
      >;
  
      Approval(
        owner?: string | null,
        spender?: string | null,
        value?: null
      ): TypedEventFilter<
        [string, string, BigNumber],
        { owner: string; spender: string; value: BigNumber }
      >;
  
      "BeaconUpgraded(address)"(
        beacon?: string | null
      ): TypedEventFilter<[string], { beacon: string }>;
  
      BeaconUpgraded(
        beacon?: string | null
      ): TypedEventFilter<[string], { beacon: string }>;
  
      "Paused(address)"(
        account?: null
      ): TypedEventFilter<[string], { account: string }>;
  
      Paused(account?: null): TypedEventFilter<[string], { account: string }>;
  
      "RoleAdminChanged(bytes32,bytes32,bytes32)"(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; previousAdminRole: string; newAdminRole: string }
      >;
  
      RoleAdminChanged(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; previousAdminRole: string; newAdminRole: string }
      >;
  
      "RoleGranted(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; account: string; sender: string }
      >;
  
      RoleGranted(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; account: string; sender: string }
      >;
  
      "RoleRevoked(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; account: string; sender: string }
      >;
  
      RoleRevoked(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): TypedEventFilter<
        [string, string, string],
        { role: string; account: string; sender: string }
      >;
  
      "Transfer(address,address,uint256)"(
        from?: string | null,
        to?: string | null,
        value?: null
      ): TypedEventFilter<
        [string, string, BigNumber],
        { from: string; to: string; value: BigNumber }
      >;
  
      Transfer(
        from?: string | null,
        to?: string | null,
        value?: null
      ): TypedEventFilter<
        [string, string, BigNumber],
        { from: string; to: string; value: BigNumber }
      >;
  
      "Unpaused(address)"(
        account?: null
      ): TypedEventFilter<[string], { account: string }>;
  
      Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  
      "Upgraded(address)"(
        implementation?: string | null
      ): TypedEventFilter<[string], { implementation: string }>;
  
      Upgraded(
        implementation?: string | null
      ): TypedEventFilter<[string], { implementation: string }>;
    };
  
    estimateGas: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      ISSUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      allowance(
        owner: string,
        spender: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      burn(
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      burnFrom(
        account: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      decimals(overrides?: CallOverrides): Promise<BigNumber>;
  
      decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      initialize(
        name: string,
        symbol: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      issuance(overrides?: CallOverrides): Promise<BigNumber>;
  
      issue(
        to: string,
        amount: BigNumberish,
        memo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      mint(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      name(overrides?: CallOverrides): Promise<BigNumber>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      paused(overrides?: CallOverrides): Promise<BigNumber>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      symbol(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      DEFAULT_ADMIN_ROLE(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      ISSUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      allowance(
        owner: string,
        spender: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        account: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      burn(
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      burnFrom(
        account: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      decreaseAllowance(
        spender: string,
        subtractedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      increaseAllowance(
        spender: string,
        addedValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      initialize(
        name: string,
        symbol: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      issuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      issue(
        to: string,
        amount: BigNumberish,
        memo: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      mint(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  